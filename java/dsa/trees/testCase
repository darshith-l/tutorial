Binary tree1:
// Tree t1 = new Tree();
      // t1.root.data = 1;

      // t1.root.lchild = new Node(2);
      // t1.root.rchild = new Node(3);

      // t1.root.lchild.lchild = new Node(4);
      // t1.root.lchild.rchild = new Node(5);

      // t1.root.rchild.lchild = new Node(10);
      // t1.root.rchild.rchild = new Node(11);

      // t1.root.lchild.lchild.lchild = new Node(6);
      // t1.root.lchild.lchild.rchild = new Node(7);

      // t1.root.lchild.rchild.lchild = new Node(8);
      // t1.root.lchild.rchild.rchild = new Node(9);

      // t1.root.rchild.lchild.lchild = new Node(12);
      // t1.root.rchild.lchild.rchild = new Node(13);

      // t1.root.rchild.rchild.lchild = new Node(15);
      // t1.root.rchild.rchild.rchild = new Node(14);

      // t1.root.rchild.rchild.lchild.lchild = new Node(16);
      // t1.root.rchild.rchild.lchild.rchild = new Node(17);
      

      // // t1.insert();
      // t1.levelOrder_traversal();
      // System.out.println("\n\n\n");

      // t1.delete(2);
      // t1.levelOrder_traversal();
      // System.out.println("\n\n\n");

      // t1.delete(3);
      // t1.levelOrder_traversal();
      // System.out.println("\n\n\n");

      // t1.inorder_traversal(); 
      // t1.preorder_traversal();
      // t1.postorder_traversal();

      // System.out.println("\n\nWithout reccurssion: ");
      // t1.inorder_traversal(false); 
      // t1.preorder_traversal(false);
      // t1.postorder_traversal(false);