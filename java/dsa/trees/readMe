BinaryTree.java:
********Inorder traversal algorithm:
1) Initialise empty stack, Node curr = root
2) While stack is not empty or curr != null:
      while(curr != null):
         curr = curr.lchild
      end while   
      curr = pop from stack
      process curr
      curr = curr.rchild
   end while

********Post Order traversal:
1) declare two empty stacks
2) push root to stack1
3) while stack1 is not empty:
      pop stack1 and push to stack2
      push left and right child of popped node to stack1
4) pop the stac2 and get postOrder traversal of given tree

******Pre Order traversal:
2) declare empty stacka and push root node.
2) While stack is not empty:
   pop a node, process it.
   push right and left child of popped node into stack.


<------------------------------------- Version details --------------------------------------------------->
BinaryTree.java: (V1)
basic binary tree with basic operations.
Operations:
Insert, Delete, Search
Traversals: inorder, preorder, postorder (all three with and without reccurssion), level order

1) Insert:
- Insertion while creating can be done
- Insertion after creating the tree can also be don
- To achieve above purpose, leaf nodes are brought
- Insertion cannot be done if root has only one child
- Updation cannot be done

2) Delete:
- Boolean function, returns true after deletion else false
- Removes the first occurance of target element provided
- In case of target node has both children, it will be replaced with deepest right node

3) Traversal:
- All trversals are static, returns void. One argument isRecurssion, true by default
****Provided traversals are:
- levelOrder_traversal(); only one implementation, non reccurssive;
- inorder_traversal();
- preorder_traversal();
- postorder_traversal();

4) Search(): boolean function returns true if element exists in tree else false

5) getLeafNode(): returns list of leafNodes 


BinaryTree.java (V2):
Added height of tree, updated levelOrder_traversal(), added traversal algorithm to readMe
deepest node: left most node in the deepest level, reverse level order is used.
getLeafNode(): updated
leftView(): First node in each level, rightView(): last node in each level

